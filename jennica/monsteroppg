def main():
    pass

from random import randint

if __name__ == '__main__':
    main()

class Karakterer:
  def __init__(self):
    self.name = ""
    self.hp = 1
    self.hp_max = 1
  def gjoor_damage(self, monster):
    damage = min(
        max(randint(0, self.hp) - randint(0, monster.hp), 0),
        monster.hp)
    monster.hp = monster.hp - damage
    if damage == 0: print("%s unngår %ss angrep." % (monster.name, self.name))
    else: print("%s skader %s!" % (self.name, monster.name))
    return monster.hp <= 0

class Monster(Karakterer):
  def __init__(self, player):
    Karakterer.__init__(self)
    self.name = 'et monster'
    self.hp = randint(1, player.hp)

class Spiller(Karakterer):
  def __init__(self):
    Karakterer.__init__(self)
    self.state = 'normal'
    self.hp = 10
    self.hp_max = 10
  def quit(self):
    print ("%s kan ikke finne veien tilbake og dør av sult.\nR.I.P." % self.name)
    self.hp = 0
  def help(self): print(Commands.keys())
  def status(self): print("%ss hp: %d/%d" % (self.name, self.hp, self.hp_max))
  def sliten(self):
    print("%s er sliten." % self.name)
    self.hp = max(1, self.hp - 1)
  def søvn(self):
    if self.state != 'normal': print("%s kan ikke slappe av nå!") % self.name; self.monster_attacks()
    else:
      print("%s slapper av." % self.name)
      if randint(0, 1):
        self.monster = Monster(self)
        print("%s blir vekket av %s!" % (self.name, self.monster.name))
        self.state = 'fight'
        self.enemy_attacks()
      else:
        if self.health < self.health_max:
          self.health = self.health + 1
        else: print("sov for lenge.") % self.name; self.health = self.health - 1
  def explore(self):
    if self.state != 'normal':
      print("%s is too busy right now!" % self.name)
      self.enemy_attacks()
    else:
      print("%s explores a twisty passage." % self.name)
      if randint(0, 1):
        self.enemy = Enemy(self)
        print("%s encounters %s!" % (self.name, self.enemy.name))
        self.state = 'fight'
      else:
        if randint(0, 1): self.tired()
  def flee(self):
    if self.state != 'fight': print("%s runs in circles for a while.") % self.name; self.tired()
    else:
      if randint(1, self.health + 5) > randint(1, self.enemy.health):
        print("%s flees from %s." % (self.name, self.enemy.name))
        self.enemy = None
        self.state = 'normal'
      else: print("%s couldn't escape from %s!") % (self.name, self.enemy.name); self.enemy_attacks()
  def attack(self):
    if self.state != 'fight': print("%s swats the air, without notable results.") % self.name; self.tired()
    else:
      if self.do_damage(self.enemy):
        print("%s executes %s!" % (self.name, self.enemy.name))
        self.enemy = None
        self.state = 'normal'
        if randint(0, self.health) < 10:
          self.health = self.health + 1
          self.health_max = self.health_max + 1
          print("%s feels stronger!" % self.name)
      else: self.enemy_attacks()
  def enemy_attacks(self):
    if self.enemy.do_damage(self): print("%s was slaughtered by %s!!!\nR.I.P." %(self.name, self.enemy.name))

Commands = {
  'quit': Spiller.quit,
  'help': Spiller.help,
  'status': Spiller.status,
  'rest': Spiller.rest,
  'explore': Spiller.explore,
  'flee': Spiller.flee,
  'attack': Spiller.attack,
  }

p = Spiller()
p.name = raw_input("What is your character's name? ")
print("type help to get a list of actions")
print("%s enters a dark cave, searching for adventure." % p.name)

while(p.hp > 0):
  line = raw_input("> ")
  args = line.split()
  if len(args) > 0:
    commandFound = False
    for c in Commands.keys():
      if args[0] == c[:len(args[0])]:
        Commands[c](p)
        commandFound = True
        break
    if not commandFound:
      print("%s doesn't understand the suggestion." % p.name)